
> Excend thermo range into the blue


> Standardise up how things are handed to the universe... maybe... eh.
	Instead of lines like: universe.art_temp.Add(art_resource.New());
	We should have universe.AddTempArt(art_resource.New());
	Ect. There are many cases of this.

	On a similar note: weapon = AssetWeaponTemplates.weapon_templates[template_name].New();
	is a bit nasty. AssetWeaponTemplates.Get(template_name).New(); is a bit nicer.


> add eliptical hitbox
	The reason id do this is for shields This would require a more advanced particle allocation.
	The particle fields would have to change as the hitbox rotated, which atm it does not need to
	Maybe dont worry about it untill circular shields become problematic.


> Can i use an eliptical approximation as a better way of allocating damage to armor?
	Currently armor uses a circular approximation to assign armor plates to the incoming angle
	This will lead to a poor distribtuion of armor on a long thin ship
	The other option is looking at a method based off the hitbox length, but that might be both
		- hard to implement
		- hard to test


> Damage handling
	Not implemented:
		- Armor passing through em damage
		- Radius affecting multiple armor segments


> Line arc art is a bit speckly. Explore the extention of line segments to combat this
	LineArt.DrawArcU draws an ard by drawing multiple line segments
	Aliasing causes some pixels to get left out.
	Overdrawing the lines a little should fix the problem.
	> Is LineArt.DrawArcUF ready to be removed?



> Particles:
	> Explore a global particle framwork
	> Add in shield pop art
		- Needs cleaning up how the explosions are generated
	> Thruster sparkles


> Thruster sparkle ports too.



> The below would be best solved using a GUI class
> Tidy up the way that ship stats drawing is managed.
	Currently the stat drawing is a huge mess.
	Its unclear whether stuff is drawn wrt to global coords or onscreen coords
	The code is split between StatusCamera and Camera
	> There is (was?) a kind of logic behind it:
		The Camera can draw status bars anywhere, but the StatusCamera will have the code
		for a full readout


> The creation of all Components through ComponentTemplate models:
	In most places, Components have public properties, and the ComponentTemplate spawns them
	through ComponentTemplate.New()

	Instead, the template should just be passed into the component, and the component
	does the initilisation.
	Then as many properties as we can become private var
	Or at least public var {get; private set;} if then need to be publically read
	
	The following have this problem and need to be signed off:
		- Components
			- ComponentArmor
			- ComponentShield
			- ComponentThrusters
			- ComponentWeapon
		- Art
			- ArtExplosion
			- ArtThruster
			- ArtSprite
			- ArtShield
			- ArtVent
		- And Ships





